<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="  
             http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
             http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd  
             http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
             http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd  
             http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd  
             http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.2.xsd  
             http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd">
             	
     <job id="B000059" xmlns="http://www.springframework.org/schema/batch">	
        <!-- Stores static data from table InterfaceMasterData,InterfaceLayoutDetail and ParameterMasterData 
        using B000059CommonUtilityService into B000059FileVO-->
        
		<step id="loadData">
			<tasklet ref="initializeData"> 
			</tasklet>
			<next on="*" to="eolDecision" />  
       		<next on="FAILED" to="exceptionHandler" />  			
		</step>

        <!-- Checks File with EOL/nonEOL and set flatFileItemReader's FixedLengthTokenizer's column value -->
		<batch:decision decider="eolDecider" id="eolDecision">
			<batch:next on="EOLFile" to="perst" />
			<batch:next on="nonEOLFile" to="NonEOLFileProcess" /> <!-- Deduce maxlength from  InterfaceLayoutDetail and creates file with EOL file for each row-->
		</batch:decision>

		<step id="NonEOLFileProcess" next="perst">
		<!-- Processing Insert EOL on every Max([P0004]-[End position]) on the file -->
			<tasklet ref="NonEOLFileTasklet" /> 
		</step>

         <!--After setting flatFileItemReader's FixedLengthTokenizer's column value in config files.
         invokes "decision" to Move files from local path to processing folder as specified in Parameter master-->
         
		<step id="perst" next="decision">
		
		<!-- Set's flatFileItemReader's FixedLengthTokenizer's column value -->
		
			<tasklet ref="storeparam">
			</tasklet>
		</step>

        <!--Moves files from local path to processing folder as specified in Parameter master-->
		<batch:decision decider="decider" id="decision">
			<batch:next on="multiFiles" to="mvmultifilesToProcess" />
		</batch:decision>

         <!--Deduce filename format from interfacemaster and also deduce single latest file or multifile and moves files and aswell insert/update single CMN_FILE_HDR   -->
		<step id="mvmultifilesToProcess">
			<tasklet ref="moveFilesTasklet" />
			<next on="*" to="updateFileMetaInfo" />  
       		<next on="FAILED" to="exceptionHandler" />  
		</step>

        <!-- Deduce file record count and update it in  CMN_FILE_HDR-->
		<step id="updateFileMetaInfo">
			<tasklet ref="callUpdateFileMetaInfo" />
		<!-- 	<next on="*" to="fileRecordLengthCheck" />   -->
				<next on="*" to="multiFileStep" />  
       		<next on="FAILED" to="exceptionHandler" />  
		</step>
		
		
		<!-- <step id="fileRecordLengthCheck">
			<tasklet ref="RecordLengthCheckTasklet"/>
			<next on="*" to="multiFileStep" />  
       		<next on="FAILED" to="exceptionHandler" />  
		</step> -->
		
		
		<step id="multiFileStep">
			<tasklet>
			<!-- Reads/process and writes into CmnInterfaceData using JpaPagingItemReader -->
				<chunk reader="multifileReader" processor="multifileProcessor"
					writer="databaseWriter" commit-interval="1000"/> 
				<batch:listeners>
				     <!--Deduct and add file LIFO/FIFO order to MultiResourceItemReader's resource object B000059FileVO --> 
					<batch:listener ref="multiFileAddtionStepListener" /> 
					</batch:listeners>
			</tasklet>						
			<next on="*" to="finalStep" />  
       		<next on="FAILED" to="exceptionHandler" />  
		</step>			
		
		<!-- Incase of processing error removes data from common interface data and update fail status in common header -->
		<step id="finalStep" >
			<tasklet ref="rollBack" />
			<next on="*" to="filterStep" />  
       		<next on="FAILED" to="exceptionHandler" />  
		</step>
		
		<step id="filterStep" >			
			<tasklet ref="filterTask" />
			<next on="*" to="completedStep" />  
       		<next on="FAILED" to="exceptionHandler" />  
		</step>
		
		<step id="exceptionHandler">
			<tasklet ref="exceptionHandlerTasklet"/>
		</step>
		
		<step id="completedStep">
			<tasklet ref="completedStepTasklet"/>
		</step>
</job>

	<!-- Loading the data as per the interface id. -->
	<bean id="initializeData" class="com.nissangroups.pd.b000059.main.B000059InitializationData" scope="step" />
		
	<!-- Checking End of file is avail in the file [P0001]-[File_Type]-->
	<bean id="eolDecider"	class="com.nissangroups.pd.b000059.processor.B000059EOLFileDecider" />
		
	<!-- Processing Insert EOL on every Max([P0004]-[End position]) on the file -->
	<bean id="NonEOLFileTasklet" class="com.nissangroups.pd.b000059.util.B000059NonEOLFileTasklet" scope="step"/>	
	
	<!-- Record Length Check Tasklet -->
	<bean id="RecordLengthCheckTasklet" class="com.nissangroups.pd.b000059.util.B000059RecordLengthTasklet" scope="step"/>
	
	<bean id="rollBack" class="com.nissangroups.pd.b000059.util.B000059ExceptionRollback" scope="step" />
	
	<bean id="filterTask" class="com.nissangroups.pd.b000059.util.B000059FilterTask" scope="step" />
	
	<bean id="exceptionHandlerTasklet" class="com.nissangroups.pd.b000059.util.B000059ExceptionHandler" scope="step" />
	
	<bean id="completedStepTasklet" class="com.nissangroups.pd.b000059.util.B000059CompletedStepHandler" scope="step" />
		
	<bean id="callUpdateFileMetaInfo" class="com.nissangroups.pd.b000059.util.B000059UpdateFileMetaInfo" scope="step"/>

	<!-- Single / Mulitp File Decision maker -->
	<bean id="decider"
		class="com.nissangroups.pd.b000059.processor.B000059FileProcessDecider" />



	<bean id="multiFileAddtionStepListener"
		class="com.nissangroups.pd.b000059.util.B000059MultipleFileAdditionListener" scope="step">		
	</bean>	

	<bean id="moveFilesTasklet"
		class="com.nissangroups.pd.b000059.util.B000059MoveFilesTasklet"
		scope="step">
		<!-- <property name="directory" value="file:D:/Public/soucecode/PDEApp/batch/src/main/resources/main/sample*.txt" 
			/> -->
		<!-- <property name="directory"
			value="file:D:/Public/soucecode/PDEApp/batch/src/main/resources/main/I000026" /> -->
		<!-- <property name="directory" value="'#{jobParameters['INTERFACE_FILE_ID']}'" -->

	</bean>


	<bean id="storeparam" class="com.nissangroups.pd.b000059.util.B000059ColumnRangeTasklet"	scope="step" />
	
	<bean id="multifileReader"	class="com.nissangroups.pd.b000059.reader.MultiFileResourcePartitioner">
		<property name="delegate" ref="flatFileItemReader" />
	</bean>

	<bean id="flatFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
						<property name="columns" value="#{jobExecutionContext['COLS']}"></property>
					</bean>
				</property>

				<property name="fieldSetMapper">
					<bean class="com.nissangroups.pd.b000059.mapper.B000059FileVOFieldSetMapper" />
				</property>
			</bean>
		</property>
	</bean>

	<bean id="multifileProcessor"
		class="org.springframework.batch.item.support.CompositeItemProcessor"
		>
		
		<!-- validates length,format,set default value,check type,transform and identify error
		     if validation occured - In multi filecondition check skiplevel ='Y' file get processed but not inserted into common interfacedata 
		                             if skipLevel='N' we skip inserting into  common interfacedata 
		     Reflection is used to get specfic value from B000059FileVO based on Column order value specified in InterfaceLayoutDetail datatable-->
		<property name="delegates">
			<util:list>
				<ref bean="lp" />
				<ref bean="fp" />	
			 	<ref bean="typ" />	      
				<ref bean="dp" />			
				<ref bean="ivep" /> 
				<ref bean="tfp" />
			</util:list>
		</property>

	</bean>

	<!-- <bean id="cp" class="com.nissangroups.pd.b000059.processor.B000059CompositeDataProcessor" 
		scope="step"> </bean> -->
	<bean id="lp"
		class="com.nissangroups.pd.b000059.processor.B000059LengthValProcessor"
		>
	</bean>
	<bean id="fp"
		class="com.nissangroups.pd.b000059.processor.B000059FormatValProcessor"
		>
	</bean>
	<bean id="dp"
		class="com.nissangroups.pd.b000059.processor.B000059DefValProcessor"
		>
	</bean>
	<bean id="typ"
		class="com.nissangroups.pd.b000059.processor.B000059TypeValProcessor"
		>
	</bean>
	<bean id="ivep"
		class="com.nissangroups.pd.b000059.processor.B000059IdentifyValErrorProcessor"
		>
	</bean>
	<bean id="tfp"
		class="com.nissangroups.pd.b000059.processor.B000059ConversionTransformProcessor"
		>
	</bean>


	<bean id="databaseWriter"
		class="com.nissangroups.pd.b000059.writer.B000059CommonLayerJpaItemWriter"
		>
	</bean>

	<bean id="commonutility"
		class="com.nissangroups.pd.b000059.util.B000059CommonUtilityService"></bean>

	<bean id="fileSpecVO" class="com.nissangroups.pd.b000059.bean.B000059FileSpecVO"></bean>
	<bean id="validate" class="com.nissangroups.pd.b000059.util.B000059ValidateUtility"></bean>

	<bean id="fileVO" class="com.nissangroups.pd.b000059.bean.B000059FileVO"></bean>

	<context:component-scan base-package="com.nissangroups.pd.b000059"></context:component-scan>

	<bean id="dataValService" class="com.nissangroups.pd.b000059.util.B000059DataValidatorService"></bean>
	<bean id="lengthVal" class="com.nissangroups.pd.b000059.util.B000059LengthValidator"></bean>
	<bean id="formatVal" class="com.nissangroups.pd.b000059.util.B000059FormatValidator"></bean>
	<bean id="typeVal" class="com.nissangroups.pd.b000059.util.B000059TypeValidator"></bean>
	<bean id="defaultVal" class="com.nissangroups.pd.b000059.util.B000059DefaultValueValidator"></bean>
</beans>